extends "src/base.pkl"
import "src/common.pkl"

hidden modules: List<String> = List(
    "app"
)

hidden apkVariants: List<String> = List(
    "debug",
    "release"
)

hidden aabVariants: List<String> = List(
    "release"
)

name = "Build App"

on = new On {
    push = new Push {
        branches = new Listing {
            "main"
            "develop"
            "release/**"
        }
    }
    pull_request = new PullRequest {
        branches = new Listing {
            "main"
            "develop"
        }
    }
}

permissions = new Mapping {
    ["contents"] = "write"
}

jobs = new Mapping {
    ["version"] = new Job {
        outputs = new Mapping {
            ["version"] = "${{ steps.gitversion.outputs.semVer }}"
            ["versionCode"] = "${{ steps.run_number.outputs.versionCode }}"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Install GitVersion"
                uses = "gittools/actions/gitversion/setup@v0.9.6"
                with = new Mapping {
                    ["versionSpec"] = "5.x"
                }
            }
            new ActionStep {
                name = "Use GitVersion"
                id = "gitversion"
                uses = "gittools/actions/gitversion/execute@v0.9.6"
                with = new Mapping {
                    ["useConfigFile"] = true
                    ["configFilePath"] = "./gitversion.yml"
                }
            }
            new CommandStep {
                name = "Display SemVer"
                run = "echo \"SemVer: ${{ steps.gitversion.outputs.semVer }}\""
            }
        }
    }
    ["build-apk"] = new Job {
        strategy = new JobStrategy {
            matrix = new Mapping {
                ["module"] = modules
                ["variant"] = apkVariants
            }
        }
        needs = new Listing {
            "version"
        }
        steps = new Listing {
            common.checkout
            common.setupJdk
            new ActionStep {
                id = "variantCap"
                uses = "ASzc/change-string-case-action@v1"
                with = new Mapping {
                    ["string"] = "${{ matrix.variant }}"
                }
            }
            (common.gradle(
                "Build", 
                "${{ matrix.module }}:build${{ steps.variantCap.outputs.capitalized }}"
            )) {
                env = new Mapping {
                    ["ORG_GRADLE_PROJECT_version"] = "${{ needs.version.outputs.version }}"
                    ["ORG_GRADLE_PROJECT_versionCode"] = "${{ needs.version.outputs.versionCode }}"
                }
            }
            new CommandStep {
                name = "Rename APK"
                run = "mv ./${{ matrix.module }}/build/outputs/apk/${{ matrix.module }}-${{ matrix.variant }}.apk ./${{ matrix.module }}-${{ matrix.variant }}.apk"
            }
            new ActionStep {
                uses = "actions/upload-artifact@master"
                with = new Mapping {
                    ["name"] = "${{ matrix.module }}-${{ matrix.variant }}-apk"
                    ["path"] = "./${{ matrix.module }}-${{ matrix.variant }}.apk"
                }
            }
        }
    }
    ["build-aab"] = new Job {
        strategy = new JobStrategy {
            matrix = new Mapping {
                ["module"] = modules
                ["variant"] = aabVariants
            }
        }
        needs = new Listing {
            "version"
        }
        steps = new Listing {
            common.checkout
            common.setupJdk
            new ActionStep {
                id = "variantCap"
                uses = "ASzc/change-string-case-action@v1"
                with = new Mapping {
                    ["string"] = "${{ matrix.variant }}"
                }
            }
            (common.gradle(
                "Build", 
                "${{ matrix.module }}:bundle${{ steps.variantCap.outputs.capitalized }}"
            )) {
                env = new Mapping {
                    ["ORG_GRADLE_PROJECT_version"] = "${{ needs.version.outputs.version }}"
                    ["ORG_GRADLE_PROJECT_versionCode"] = "${{ needs.version.outputs.versionCode }}"
                }
            }
            new ActionStep {
                id = "sign"
                uses = "ilharp/sign-android-release@v1"
                name = "Sign AAB"
                with = new Mapping {
                    ["releaseDir"] = "./${{ matrix.module }}/build/outputs/bundle/release/"
                    ["signingKey"] = "${{ secrets.SIGNING_KEY }}"
                    ["keyAlias"] = "${{ secrets.ALIAS }}"
                    ["keyStorePassword"] = "${{ secrets.KEY_STORE_PASSWORD }}"
                    ["keyPassword"] = "${{ secrets.KEY_PASSWORD }}"
                    ["buildToolsVersion"] = "33.0.0"
                }
            }
            new CommandStep {
                name = "Rename APK"
                run = "mv ${{steps.sign_app.outputs.signedFile}} ./${{ matrix.module }}-${{ matrix.variant }}.aab"
            }
            new ActionStep {
                uses = "actions/upload-artifact@master"
                with = new Mapping {
                    ["name"] = "${{ matrix.module }}-${{ matrix.variant }}-aab"
                    ["path"] = "./${{ matrix.module }}-${{ matrix.variant }}.aab"
                }
            }
        }
    }
    ["release"] = new Job {
        needs = new Listing {
            "version"
        }
        `if` = "github.event_name != 'pull_request'"
        permissions = new Mapping {
            ["contents"] = "write"
        }
        outputs = new Mapping {
            ["upload_url"] = "${{ steps.create_release.outputs.upload_url }}"
        }
        steps = new Listing {
            common.checkout
            common.create_release
        }
    }
    ["publish-release-apk"] = new Job {
        strategy = new JobStrategy {
            matrix = new Mapping {
                ["module"] = modules
                ["variant"] = apkVariants
            }
        }
        needs = new Listing {
            "version"
            "release"
            "build-apk"
        }
        steps = new Listing {
            new ActionStep {
                uses = "actions/download-artifact@master"
                with = new Mapping {
                    ["name"] = "${{ matrix.module }}-${{ matrix.variant }}-apk"
                    ["path"] = "./"
                }
            }
            new ActionStep {
                name = "Upload Artifact to Release"
                uses = "actions/upload-release-asset@v1"
                env = new Mapping {
                    ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                }
                with = new Mapping {
                    ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
                    ["asset_path"] = "./${{ matrix.module }}-${{ matrix.variant }}.apk"
                    ["asset_name"] = "${{ matrix.module }}-${{ matrix.variant }}-v${{ needs.version.outputs.version }}.apk"
                    ["asset_content_type"] = "application/zip"
                }
            }
        }  
    }
    ["publish-release-aab"] = new Job {
        strategy = new JobStrategy {
            matrix = new Mapping {
                ["module"] = modules
                ["variant"] = aabVariants
            }
        }
        needs = new Listing {
            "version"
            "release"
            "build-aab"
        }
        steps = new Listing {
            new ActionStep {
                uses = "actions/download-artifact@master"
                with = new Mapping {
                    ["name"] = "${{ matrix.module }}-${{ matrix.variant }}-aab"
                    ["path"] = "./"
                }
            }
            new ActionStep {
                name = "Upload Artifact to Release"
                uses = "actions/upload-release-asset@v1"
                env = new Mapping {
                    ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                }
                with = new Mapping {
                    ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
                    ["asset_path"] = "./${{ matrix.module }}-${{ matrix.variant }}.aab"
                    ["asset_name"] = "${{ matrix.module }}-${{ matrix.variant }}-v${{ needs.version.outputs.version }}.aab"
                    ["asset_content_type"] = "application/zip"
                }
            }
        }  
    }
}.toMap().filter((k,v) -> v != null).toMapping()