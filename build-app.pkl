extends "src/base.pkl"
import "src/common.pkl"

class BuildDescriptor {
    variant: String
    flavor: String?
    release: Boolean

    function full() = if (flavor == null) variant.capitalize() else "\(flavor.capitalize())\(variant.capitalize())"
    function path() = if (flavor == null) variant else "\(flavor)/\(variant)"
    function name() = if (flavor == null) variant else "\(flavor)-\(variant)"
}

local function generateMatrixInclude(descriptors: List<BuildDescriptor>): Listing<Mapping<String, Any>> = new Listing {
    for (descriptor in descriptors) {
        new Mapping {
            ["build-command"] = descriptor.full()
            ["variant"] = descriptor.variant
            ["flavor"] = descriptor.flavor
            ["release"] = descriptor.release
            ["path"] = descriptor.path()
            ["name"] = descriptor.name()
        }
    }
}

local function buildJob(
    descriptors: List<BuildDescriptor>, 
    extension: String, 
    command: String, 
    folder: String
) = new Job {
    strategy = new JobStrategy {
        matrix = new Mapping {
            ["module"] = modules
            ["build-command"] = descriptors.map((e) -> e.full())
            ["include"] = generateMatrixInclude(descriptors)
        }
    }
    needs = new Listing {
        "version"
    }
    steps = new Listing {
        common.checkout
        common.setupJdk
        (common.gradle(
            "Build", 
            "${{ matrix.module }}:\(command)${{ matrix.build-command }}"
        )) {
            env = new Mapping {
                ["ORG_GRADLE_PROJECT_version"] = "${{ needs.version.outputs.version }}"
                ["ORG_GRADLE_PROJECT_versionCode"] = "${{ needs.version.outputs.versionCode }}"
            }
        }
        (common.signApp("./${{ matrix.module }}/build/outputs/\(folder)/${{ matrix.path }}/")) {
            `if` = "${{ matrix.release }}"
        }
        new CommandStep {
            name = "Rename \(extension)"
            run = "mv ${{steps.sign_app.outputs.signedFile}} ./${{ matrix.module }}-${{ matrix.name }}.\(extension)"
            `if` = "${{ matrix.release }}"
        }
        new CommandStep {
            name = "Rename \(extension)"
            run = "mv ./${{ matrix.module }}/build/outputs/\(folder)/${{ matrix.path }}/${{ matrix.module }}-${{ matrix.name }}.\(extension) ./${{ matrix.module }}-${{ matrix.name }}.\(extension)"
            `if` = "${{ !matrix.release }}"
        }
        new ActionStep {
            uses = "actions/upload-artifact@master"
            with = new Mapping {
                ["name"] = "${{ matrix.module }}-${{ matrix.name }}-\(extension)"
                ["path"] = "./${{ matrix.module }}-${{ matrix.name }}.\(extension)"
            }
        }
    }
}

local const RELEASE_BUILD_DESCRIPTOR = new BuildDescriptor {
    variant = "release"
    release = true
}
local const DEBUG_BUILD_DESCRIPTOR = new BuildDescriptor {
    variant = "debug"
    release = false
}

hidden modules: List<String> = List(
    "app"
)

hidden apkBuildDescriptors: List<BuildDescriptor> = List(
    DEBUG_BUILD_DESCRIPTOR,
    RELEASE_BUILD_DESCRIPTOR
)

hidden aabBuildDescriptors: List<BuildDescriptor> = List(
    RELEASE_BUILD_DESCRIPTOR
)

name = "Build App"

on = new On {
    push = new Push {
        branches = new Listing {
            "main"
            "develop"
            "release/**"
        }
    }
    pull_request = new PullRequest {
        branches = new Listing {
            "main"
            "develop"
        }
    }
}

permissions = new Mapping {
    ["contents"] = "write"
}

jobs = new Mapping {
    ["version"] = new Job {
        outputs = new Mapping {
            ["version"] = "${{ steps.gitversion.outputs.semVer }}"
            ["versionCode"] = "${{ steps.run_number.outputs.versionCode }}"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Install GitVersion"
                uses = "gittools/actions/gitversion/setup@v0.9.6"
                with = new Mapping {
                    ["versionSpec"] = "5.x"
                }
            }
            new ActionStep {
                name = "Use GitVersion"
                id = "gitversion"
                uses = "gittools/actions/gitversion/execute@v0.9.6"
                with = new Mapping {
                    ["useConfigFile"] = true
                    ["configFilePath"] = "./gitversion.yml"
                }
            }
            new CommandStep {
                name = "Display SemVer"
                run = "echo \"SemVer: ${{ steps.gitversion.outputs.semVer }}\""
            }
        }
    }
    ["build-apk"] = buildJob(
        apkBuildDescriptors,
        "apk",
        "build",
        "apk"
    )
    ["build-aab"] = buildJob(
        aabBuildDescriptors,
        "aab",
        "bundle",
        "bundle"
    )
    ["release"] = new Job {
        needs = new Listing {
            "version"
        }
        `if` = "github.event_name != 'pull_request'"
        permissions = new Mapping {
            ["contents"] = "write"
        }
        outputs = new Mapping {
            ["upload_url"] = "${{ steps.create_release.outputs.upload_url }}"
        }
        steps = new Listing {
            common.checkout
            common.create_release
        }
    }
    ["publish-release-apk"] = new Job {
        strategy = new JobStrategy {
            matrix = new Mapping {
                ["module"] = modules
                ["variant"] = apkBuildDescriptors
            }
        }
        needs = new Listing {
            "version"
            "release"
            "build-apk"
        }
        steps = new Listing {
            new ActionStep {
                uses = "actions/download-artifact@master"
                with = new Mapping {
                    ["name"] = "${{ matrix.module }}-${{ matrix.variant }}-apk"
                    ["path"] = "./"
                }
            }
            new ActionStep {
                name = "Upload Artifact to Release"
                uses = "actions/upload-release-asset@v1"
                env = new Mapping {
                    ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                }
                with = new Mapping {
                    ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
                    ["asset_path"] = "./${{ matrix.module }}-${{ matrix.variant }}.apk"
                    ["asset_name"] = "${{ matrix.module }}-${{ matrix.variant }}-v${{ needs.version.outputs.version }}.apk"
                    ["asset_content_type"] = "application/zip"
                }
            }
        }  
    }
    ["publish-release-aab"] = new Job {
        strategy = new JobStrategy {
            matrix = new Mapping {
                ["module"] = modules
                ["variant"] = aabBuildDescriptors
            }
        }
        needs = new Listing {
            "version"
            "release"
            "build-aab"
        }
        steps = new Listing {
            new ActionStep {
                uses = "actions/download-artifact@master"
                with = new Mapping {
                    ["name"] = "${{ matrix.module }}-${{ matrix.variant }}-aab"
                    ["path"] = "./"
                }
            }
            new ActionStep {
                name = "Upload Artifact to Release"
                uses = "actions/upload-release-asset@v1"
                env = new Mapping {
                    ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                }
                with = new Mapping {
                    ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
                    ["asset_path"] = "./${{ matrix.module }}-${{ matrix.variant }}.aab"
                    ["asset_name"] = "${{ matrix.module }}-${{ matrix.variant }}-v${{ needs.version.outputs.version }}.aab"
                    ["asset_content_type"] = "application/zip"
                }
            }
        }  
    }
}.toMap().filter((k,v) -> v != null).toMapping()