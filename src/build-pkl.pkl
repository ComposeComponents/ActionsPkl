extends "common/base.pkl"
import "common/common.pkl"

hidden modules: Listing<String>(length > 0)
hidden versionUpdateCommit: Boolean = false
hidden extraTags: Boolean = true

local overwriteFile = new ActionStep {
    uses = "DamianReeves/write-file-action@master"
    with = new Mapping {
        ["path"] = ".version"
        ["write-mode"] = "overwrite"
        ["contents"] = "${{ needs.version.outputs.version }}"
    }
}

name = "Build Pkl"

on = new On {
    push = new Push {
        branches = new Listing {
            "main"
            "develop"
            "release/**"
        }
    }
    pull_request = new PullRequest {
        branches = new Listing {
            "main"
            "develop"
        }
    }
}

jobs = new Mapping {
    ["version"] = new Job {
        outputs = new Mapping {
            ["version"] = "${{ steps.gitversion.outputs.semVer }}"
            ["current-version"] = "${{ env.CURRENT_VERSION }}"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Install GitVersion"
                uses = "gittools/actions/gitversion/setup@v0.9.6"
                with = new Mapping {
                    ["versionSpec"] = "5.x"
                }
            }
            new CommandStep {
                name = "Get current Pkl version"
                run = """
                VER=$(cat .version)
                echo "CURRENT_VERSION=$VER" >> $GITHUB_ENV
                """
            }
            new ActionStep {
                name = "Use GitVersion"
                id = "gitversion"
                uses = "gittools/actions/gitversion/execute@v0.9.6"
                with = new Mapping {
                    ["useConfigFile"] = true
                    ["configFilePath"] = "./gitversion.yml"
                }
            }
            new CommandStep {
                name = "Display SemVer"
                run = "echo \"SemVer: ${{ steps.gitversion.outputs.semVer }}\""
            }
        }
    }
    ["should-release"] = new Job {
        outputs = new Mapping {
            ["proceed"] = "${{ steps.release.outputs.proceed && github.event_name != 'pull_request' }}"
        }
        steps = new Listing {
            new ActionStep {
                id = "release"
                uses = "phish108/release-check@1.0.15"
                with = new Mapping {
                    ["github-token"] = "${{ secrets.GITHUB_TOKEN }}"
                    ["protected-paths"] = """
                    README.md
                    .version
                    """
                }
            }
        }
    }
    ["release"] = new Job {
        needs = new Listing {
            "version"
            "should-release"
        }
        permissions = new Mapping {
            ["contents"] = "write"
        }
        outputs = new Mapping {
            ["upload_url"] = "${{ steps.create_release.outputs.upload_url }}"
        }
        `if` = "needs.should-release.outputs.proceed"
        steps = new Listing {
            common.checkout
            common.create_release
            ...(
                if(extraTags) new Listing {
                    for (mdule in modules) {
                        new ActionStep {
                            uses = "tvdias/github-tagger@v0.0.1"
                            with = new Mapping {
                                ["repo-token"] = "${{ secrets.GITHUB_TOKEN }}"
                                ["tag"] = "\(mdule)@${{ needs.version.outputs.version }}"
                            }
                        }
                    }
                } else new Listing {}
            )
        }
    }
    ...(
        if (versionUpdateCommit) new Mapping {
            ["version-update"] = new Job {
                needs = new Listing {
                    "version"
                    "should-release"
                }
                permissions = new Mapping {
                    ["contents"] = "write"
                }
                `if` = "needs.should-release.outputs.proceed"
                steps = new Listing {
                    common.checkout
                    overwriteFile
                    new ActionStep {
                        uses = "jacobtomlinson/gha-find-replace@v3"
                        with = new Mapping {
                            ["find"] = "${{ needs.version.outputs.current-version }}"
                            ["replace"] = "${{ needs.version.outputs.version }}"
                            ["regex"] = false
                            ["include"] = "README.md"
                        }
                    }
                    new ActionStep {
                        uses = "stefanzweifel/git-auto-commit-action@v5"
                        with = new Mapping {
                            ["commit_message"] = "Bump version number from ${{ needs.version.outputs.current-version }} to ${{ needs.version.outputs.version }}"
                        }
                    }
                }
            }
        } else new Mapping {}
    )
    ["upload-project"] = new Job {
        needs = new Listing {
            "version"
            "release"
        }
        permissions = new Mapping {
            ["contents"] = "write"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Install Pkl"
                uses = "pkl-community/setup-pkl@v0"
                with = new Mapping {
                    ["pkl-version"] = "0.25.3"
                }
            }
            overwriteFile
            new CommandStep {
                name = "Package project"
                run = "pkl project package src"
            }
            for (mdule in modules) {
                new CommandStep {
                    name = "Upload Release Artifact"
                    env = new Mapping {
                        ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                    }
                    run = """
                    TAG=\(mdule)@${{ needs.version.outputs.version }}
                    gh release upload v${{ needs.version.outputs.version }} .out/$TAG/*
                    gh release edit v${{ needs.version.outputs.version }} -t v${{ needs.version.outputs.version }}
                    """
                }
            }
        }
    }
}.toMap().filter((k,v) -> v != null).toMapping()